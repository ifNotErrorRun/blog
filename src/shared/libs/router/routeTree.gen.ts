/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './../../../pages/__root'
import { Route as IndexImport } from './../../../pages/index'
import { Route as publicContactRouteImport } from './../../../pages/(public)/contact/route'
import { Route as publicArticlesRouteImport } from './../../../pages/(public)/articles/route'
import { Route as publicAboutRouteImport } from './../../../pages/(public)/about/route'
import { Route as publicContactIndexImport } from './../../../pages/(public)/contact/index'
import { Route as publicArticlesIndexImport } from './../../../pages/(public)/articles/index'
import { Route as publicAboutIndexImport } from './../../../pages/(public)/about/index'
import { Route as authArticlesNewRouteImport } from './../../../pages/(auth)/articles.new.route'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const publicContactRouteRoute = publicContactRouteImport.update({
  id: '/(public)/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any)

const publicArticlesRouteRoute = publicArticlesRouteImport.update({
  id: '/(public)/articles',
  path: '/articles',
  getParentRoute: () => rootRoute,
} as any)

const publicAboutRouteRoute = publicAboutRouteImport.update({
  id: '/(public)/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const publicContactIndexRoute = publicContactIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => publicContactRouteRoute,
} as any)

const publicArticlesIndexRoute = publicArticlesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => publicArticlesRouteRoute,
} as any)

const publicAboutIndexRoute = publicAboutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => publicAboutRouteRoute,
} as any)

const authArticlesNewRouteRoute = authArticlesNewRouteImport.update({
  id: '/(auth)/articles/new',
  path: '/articles/new',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(public)/about': {
      id: '/(public)/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof publicAboutRouteImport
      parentRoute: typeof rootRoute
    }
    '/(public)/articles': {
      id: '/(public)/articles'
      path: '/articles'
      fullPath: '/articles'
      preLoaderRoute: typeof publicArticlesRouteImport
      parentRoute: typeof rootRoute
    }
    '/(public)/contact': {
      id: '/(public)/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof publicContactRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/articles/new': {
      id: '/(auth)/articles/new'
      path: '/articles/new'
      fullPath: '/articles/new'
      preLoaderRoute: typeof authArticlesNewRouteImport
      parentRoute: typeof rootRoute
    }
    '/(public)/about/': {
      id: '/(public)/about/'
      path: '/'
      fullPath: '/about/'
      preLoaderRoute: typeof publicAboutIndexImport
      parentRoute: typeof publicAboutRouteImport
    }
    '/(public)/articles/': {
      id: '/(public)/articles/'
      path: '/'
      fullPath: '/articles/'
      preLoaderRoute: typeof publicArticlesIndexImport
      parentRoute: typeof publicArticlesRouteImport
    }
    '/(public)/contact/': {
      id: '/(public)/contact/'
      path: '/'
      fullPath: '/contact/'
      preLoaderRoute: typeof publicContactIndexImport
      parentRoute: typeof publicContactRouteImport
    }
  }
}

// Create and export the route tree

interface publicAboutRouteRouteChildren {
  publicAboutIndexRoute: typeof publicAboutIndexRoute
}

const publicAboutRouteRouteChildren: publicAboutRouteRouteChildren = {
  publicAboutIndexRoute: publicAboutIndexRoute,
}

const publicAboutRouteRouteWithChildren =
  publicAboutRouteRoute._addFileChildren(publicAboutRouteRouteChildren)

interface publicArticlesRouteRouteChildren {
  publicArticlesIndexRoute: typeof publicArticlesIndexRoute
}

const publicArticlesRouteRouteChildren: publicArticlesRouteRouteChildren = {
  publicArticlesIndexRoute: publicArticlesIndexRoute,
}

const publicArticlesRouteRouteWithChildren =
  publicArticlesRouteRoute._addFileChildren(publicArticlesRouteRouteChildren)

interface publicContactRouteRouteChildren {
  publicContactIndexRoute: typeof publicContactIndexRoute
}

const publicContactRouteRouteChildren: publicContactRouteRouteChildren = {
  publicContactIndexRoute: publicContactIndexRoute,
}

const publicContactRouteRouteWithChildren =
  publicContactRouteRoute._addFileChildren(publicContactRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof publicAboutRouteRouteWithChildren
  '/articles': typeof publicArticlesRouteRouteWithChildren
  '/contact': typeof publicContactRouteRouteWithChildren
  '/articles/new': typeof authArticlesNewRouteRoute
  '/about/': typeof publicAboutIndexRoute
  '/articles/': typeof publicArticlesIndexRoute
  '/contact/': typeof publicContactIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/articles/new': typeof authArticlesNewRouteRoute
  '/about': typeof publicAboutIndexRoute
  '/articles': typeof publicArticlesIndexRoute
  '/contact': typeof publicContactIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(public)/about': typeof publicAboutRouteRouteWithChildren
  '/(public)/articles': typeof publicArticlesRouteRouteWithChildren
  '/(public)/contact': typeof publicContactRouteRouteWithChildren
  '/(auth)/articles/new': typeof authArticlesNewRouteRoute
  '/(public)/about/': typeof publicAboutIndexRoute
  '/(public)/articles/': typeof publicArticlesIndexRoute
  '/(public)/contact/': typeof publicContactIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/articles'
    | '/contact'
    | '/articles/new'
    | '/about/'
    | '/articles/'
    | '/contact/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/articles/new' | '/about' | '/articles' | '/contact'
  id:
    | '__root__'
    | '/'
    | '/(public)/about'
    | '/(public)/articles'
    | '/(public)/contact'
    | '/(auth)/articles/new'
    | '/(public)/about/'
    | '/(public)/articles/'
    | '/(public)/contact/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  publicAboutRouteRoute: typeof publicAboutRouteRouteWithChildren
  publicArticlesRouteRoute: typeof publicArticlesRouteRouteWithChildren
  publicContactRouteRoute: typeof publicContactRouteRouteWithChildren
  authArticlesNewRouteRoute: typeof authArticlesNewRouteRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  publicAboutRouteRoute: publicAboutRouteRouteWithChildren,
  publicArticlesRouteRoute: publicArticlesRouteRouteWithChildren,
  publicContactRouteRoute: publicContactRouteRouteWithChildren,
  authArticlesNewRouteRoute: authArticlesNewRouteRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(public)/about",
        "/(public)/articles",
        "/(public)/contact",
        "/(auth)/articles/new"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(public)/about": {
      "filePath": "(public)/about/route.tsx",
      "children": [
        "/(public)/about/"
      ]
    },
    "/(public)/articles": {
      "filePath": "(public)/articles/route.tsx",
      "children": [
        "/(public)/articles/"
      ]
    },
    "/(public)/contact": {
      "filePath": "(public)/contact/route.tsx",
      "children": [
        "/(public)/contact/"
      ]
    },
    "/(auth)/articles/new": {
      "filePath": "(auth)/articles.new.route.tsx"
    },
    "/(public)/about/": {
      "filePath": "(public)/about/index.tsx",
      "parent": "/(public)/about"
    },
    "/(public)/articles/": {
      "filePath": "(public)/articles/index.tsx",
      "parent": "/(public)/articles"
    },
    "/(public)/contact/": {
      "filePath": "(public)/contact/index.tsx",
      "parent": "/(public)/contact"
    }
  }
}
ROUTE_MANIFEST_END */
