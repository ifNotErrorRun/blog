
# 프로젝트 구성

## 기술 스택
- 프레임워크
  - astro.js : static site generation
  - React19 : frontend
- 배포, 서버리스
  - Netlify : deployment and serverless functions
- 데이터베이스
  - Supabase : database and authentication
    - 로컬 개발: 도커 self-hosted Supabase
    - 배포 환경: 웹 Supabase
  - 인증 시스템:
    - JWT 기반 인증
    - Netlify 함수를 통한 서버 사이드 인증 처리
- 상태 관리 (전역, 서버)
  - Zustand : state management
  - React Query : server state management
- 스타일
  - Tailwind CSS : styling
- 타입스크립트
  - TypeScript : type safety
- 버전 관리
  - GitHub : version control
- UI 구성 요소
  - Shadcn/UI : UI components
- 테스트
  - Vitest : unit testing
  - React Testing Library : component testing
- CI/CD
  - GitHub Actions : CI/CD
- 코드 품질
  - ESLint : linting
  - Prettier : code formatting

## 프로젝트 구조 (FSD Architecture)
```
/docs - 문서화
/src
  /features - 기능별 구성 요소 
    /[feature_name] - 각 기능별 폴더
      /blocks - 기능별 구성 요소
      /containers - 기능별 컨테이너
      /interactions - 기능별 상호작용
      /apis - 기능별 API 호출
      /styles - 기능별 스타일
  /pages - 페이지 구성 요소 (파일 기반 라우팅)
  /shared - 공유 구성 요소
    /apis - API 호출
    /assets - 이미지 및 기타 정적 자산
    /components - 재사용 가능한 구성 요소
      /containers - 재사용 가능한 컨테이너
      /interactions - 재사용 가능한 상호작용
      /ui - Shadcn/UI 구성 요소
    /constants - 상수 및 설정
    /layouts - 레이아웃 구성 요소
    /lib - 라이브러리 및 헬퍼 함수
    /schemas - 데이터베이스 스키마
    /stores - 상태 관리 (Zustand)
    /styles - Tailwind CSS 스타일
    /types - TypeScript 타입 정의
    /utils - 유틸리티 함수 및 상수
  /widgets - 재사용 가능한 구성 요소
  middleware.ts - 미들웨어 (인증, 권한 부여)
```

## 개발 워크플로우
- Cline이 코드 변경 작성 및 검토 지원
- Netlify에 main 브랜치에서 자동 배포
- 인증 시스템 테스트:
  - 로컬: 도커 Supabase 연결 테스트
  - 배포: 웹 Supabase 연결 테스트

## 보안
다음을 읽거나 수정하지 마세요:
- .env 파일
- **/config/secrets.*
- API 키 또는 자격 증명이 포함된 모든 파일
